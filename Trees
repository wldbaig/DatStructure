class Node {
public String name;
public Node[] children;
} 

class Tree {
 public Node root;
 } 
 
// In-order traversal means to "visit" (often, print) the left branch, then the current node, and finally, the right
// branch. 
 void inOrderTraversal(TreeNode node) {
 if (node!= null) {
 inOrderTraversal(node.left);
 visit(node);
 inOrderTraversal(node.right);
 }
 } 
 
 // Pre-order traversal visits the current node before its child nodes (hence the name "pre-order"). 
 
 void preOrderTraversal(TreeNode node) {
 if (node!= null) {
 visit(node);
 preOrderTraversal(node.left);
 preOrderTraversal(node.right);
 }
 } 
 
 // Post-order traversal visits the current node after its child nodes (hence the name "post order"). 
 
 void postOrderTraversal(TreeNode node) {
 if (node!= null) {
 postOrderTraversal(node.left);
 postOrderTraversal(node.right);
 visit(node);
 }
 } 
